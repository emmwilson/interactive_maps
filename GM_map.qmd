---
title: "Gros Morne Map"
format:
  html:
    grid:
      margin-width: 50px
      body-width: 1000px
---

```{r include=FALSE}


library(shiny)
library(leaflet)
library(leafem)
library(terra)
library(sf)
library(rsconnect)
library(shinythemes)
library(tidyverse)
library(httr)
library(rmarkdown)
library(knitr)
library(magick)

```

```{r include=FALSE}
# roads and park boundaries
roads <- vect("data/highways_nl.shp") %>% 
  project("EPSG:4326 - WGS 84")

parksGM <- vect("data/GM_outline.shp") %>% 
  project("EPSG:4326 - WGS 84")

# Terra Nova data and palettes
GM_c <- rast("data/GM_predict_tot_bm.tif")
GM_c_CIlow <- rast("data/GM_CI_lower_95.tif")
GM_c_CIupp <- rast("data/GM_CI_upper_95.tif")
GM_c_PIlow <- rast("data/GM_PI_lower_95.tif")
GM_c_PIupp <- rast("data/GM_PI_upper_95.tif")

GM_g <- rast("data/GM_predict_gap_bm.tif")
GM_g_CIlow <- rast("data/GM_gCI_lower_95.tif")
GM_g_CIupp <- rast("data/GM_gCI_upper_95.tif")
GM_g_PIlow <- rast("data/GM_gPI_lower_95.tif")
GM_g_PIupp <- rast("data/GM_gPI_upper_95.tif")

# north arrow
arrow <- "https://cdn.pixabay.com/photo/2013/07/12/17/54/arrow-152596_960_720.png"
```

```{r include=FALSE}
GMc.pal <- colorNumeric(c("#faf6ef", "#ed6f66", "#8a1c18", "#6c100d"), domain = rev(values(GM_c)), na.color = "transparent")
GMcmean.pal <- colorNumeric(c("white", "#6a51a3", "#3f007d"), domain = rev(values(GM_c_mean)), na.color = "transparent")
GMcpred.pal <- colorNumeric(c("white", "#2171b5", "#092955"), domain = rev(values(GM_c_pred)), na.color = "transparent")
GMcCI.pal <- colorNumeric(c("white", "#6a51a3", "#3f007d"), domain = c(min(values(GM_c_CIlow), na.rm = T), max(values(GM_c_CIupp), na.rm = T)), na.color = "transparent")
GMcPI.pal <- colorNumeric(c("white", "#2171b5", "#092955"), domain = c(min(values(GM_c_PIlow), na.rm = T), max(values(GM_c_PIupp), na.rm = T)), na.color = "transparent")

GMg.pal <- colorNumeric(c("#faf6ef", "#f7eedf", "#de5714"), domain = rev(0:1), na.color = "transparent")
GMgmean.pal <- colorNumeric(c("white", "#6a51a3", "#3f007d"), domain = rev(values(GM_g_mean)), na.color = "transparent")
GMgpred.pal <- colorNumeric(c("white", "#2171b5", "#092955"), domain = rev(values(GM_g_pred)), na.color = "transparent")
GMgCI.pal <- colorNumeric(c("white", "#6a51a3", "#3f007d"), domain = c(min(values(GM_g_CIlow), na.rm = T), max(values(GM_g_CIupp), na.rm = T)), na.color = "transparent")
GMgPI.pal <- colorNumeric(c("white", "#2171b5", "#092955"), domain = c(min(values(GM_g_PIlow), na.rm = T), max(values(GM_g_PIupp), na.rm = T)), na.color = "transparent")
```

```{r echo=FALSE}

GM_map <- leaflet(height=1100, width=1000) %>%
      addProviderTiles('Esri.WorldImagery') %>%
      addMapPane("parks", zIndex = 410) %>% 
      addMapPane("roads", zIndex = 415) %>%
      addMapPane("PIupp", zIndex = 420) %>% 
      addMapPane("PIlow", zIndex = 425) %>% 
      addMapPane("CIupp", zIndex = 430) %>% 
      addMapPane("CIlow", zIndex = 435) %>% 
      addMapPane("goutput", zIndex = 440) %>%
      addMapPane("coutput", zIndex = 445) %>% 
      addPolylines(data = roads, color = "#efbc15", opacity = 1, weight = 1.25,
                   options = pathOptions(pane = "roads")) %>%
      addPolygons(data = parksGM, color = "#1f78b4", weight = 1.25, fillColor = "#1f78b4", fillOpacity = 0.15,
                  options = pathOptions(pane = "parks")) %>% 
      # carbon estimates
      addRasterImage(x = GM_c , 
                     color = GMc.pal,
                     opacity = 1,
                     group = "Estimated C stocks",
                     options = pathOptions(pane = "coutput")) %>%
      addLegend(pal = GMc.pal, values = values(GM_c),
                title = "Total Carbon (g/m<sup>2</sup>)",
                group = "Estimated C stocks", opacity = 1) %>% 
      # carbon lower CI  
      addRasterImage(x = GM_c_CIlow , 
                     color = GMcCI.pal,
                     opacity = 1,
                     group = "C mean residual error",
                     options = pathOptions(pane = "CIlow")) %>%
      addLegend(pal = GMcCI.pal, values = values(c(GM_c_CIlow, GM_c_CIupp)),
                title = "95% CI </br> for carbon estimates (g/m<sup>2</sup>)",
                group = "C mean residual error", opacity = 1) %>%
      # carbon upper CI
      addRasterImage(x = GM_c_CIupp , 
                     color = GMcCI.pal,
                     opacity = 1,
                     group = "C mean residual error",
                     options = pathOptions(pane = "CIupp")) %>%
      # carbon lower PI  
      addRasterImage(x = GM_c_PIlow , 
                     color = GMcPI.pal,
                     opacity = 1,
                     group = "C prediction error",
                     options = pathOptions(pane = "PIlow")) %>%
      addLegend(pal = GMcPI.pal, values = values(c(GM_c_PIlow, GM_c_PIupp)),
                title = "95% PI </br> for carbon estimates (g/m<sup>2</sup>)",
                group = "C prediction error", opacity = 1) %>%
      # carbon upper PI
      addRasterImage(x = GM_c_PIupp , 
                     color = GMcPI.pal,
                     opacity = 1,
                     group = "C prediction error",
                     options = pathOptions(pane = "PIupp")) %>%
      # gap estimates 
      addRasterImage(x = GM_g , 
                     color = GMg.pal,
                     opacity = 1,
                     group = "Estimated mature forest/gap",
                     options = pathOptions(pane = "goutput")) %>%
      addLegend(pal = GMg.pal, values = values(GM_g),
                title = "Probability area is mature forest",
                group = "Estimated mature forest/gap", opacity = 1) %>% 
      # gap lower CI  
      addRasterImage(x = GM_g_CIlow , 
                     color = GMgCI.pal,
                     opacity = 1,
                     group = "gap mean residual error",
                     options = pathOptions(pane = "CIlow")) %>%
      addLegend(pal = GMgCI.pal, values = values(c(GM_g_CIlow, GM_g_CIupp)),
                title = "95% CI for probability </br> area is mature forest",
                group = "gap mean residual error", opacity = 1) %>%
      # gap upper CI
      addRasterImage(x = GM_g_CIupp , 
                     color = GMgCI.pal,
                     opacity = 1,
                     group = "gap mean residual error",
                     options = pathOptions(pane = "CIupp")) %>%
      # gap lower CI  
      addRasterImage(x = GM_g_PIlow , 
                     color = GMgPI.pal,
                     opacity = 1,
                     group = "gap prediction error",
                     options = pathOptions(pane = "PIlow")) %>%
      addLegend(pal = GMgPI.pal, values = values(c(GM_g_PIlow, GM_g_PIupp)),
                title = "95% PI for probability </br> area is mature forest",
                group = "gap prediction error", opacity = 1) %>%
      # gap upper CI
      addRasterImage(x = GM_g_CIupp , 
                     color = GMgCI.pal,
                     opacity = 1,
                     group = "gap residual error",
                     options = pathOptions(pane = "CIupp")) %>%
      fitBounds(-57.73 ,49.35, -57.85, 49.95) %>% 
      addHomeButton(ext = c(-57.73 ,49.35, -57.85, 49.95), position = "topleft", group = "Recenter")%>%
      addLayersControl(overlayGroups = c("Estimated C stocks", "C mean residual error", "C prediction error", "Estimated mature forest/gap", "gap mean residual error", "gap prediction error"), position = "topleft", options = layersControlOptions(collapsed = F)) %>% 
      htmlwidgets::onRender("
        function() {
            $('.leaflet-control-layers-overlays').prepend('<label style=\"text-align:left\">Available layers</label>');
        }
    ") %>%
      hideGroup( group = c("C mean residual error", "C prediction error","gap mean residual error", "gap prediction error")) %>%
  addScaleBar(position = "bottomright") %>% 
  addLogo(arrow)
    
GM_map
```
