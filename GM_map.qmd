---
title: "GM_map"
---

```{r include=FALSE}


library(shiny)
library(leaflet)
library(leafem)
library(terra)
library(sf)
library(rsconnect)
library(shinythemes)
library(tidyverse)
library(httr)
library(rmarkdown)
library(knitr)

```

```{r include=FALSE}
# roads and park boundaries
roads <- vect("data/highways_nl.shp") %>% 
  project("EPSG:4326 - WGS 84")

parksGM <- vect("data/GM_outline.shp") %>% 
  project("EPSG:4326 - WGS 84")

# Terra Nova data and palettes
GM_c <- rast("data/GM_predict_tot_bm.tif")
GM_c_mean <- rast("data/GM_predict_tot_se.tif")
GM_c_pred <- rast("data/GM_predict_tot_pse.tif")

GM_g <- rast("data/GM_predict_gap_bm.tif")
GM_g_mean <- rast("data/GM_predict_tot_gap_se.tif")
GM_g_pred <- rast("data/GM_predict_tot_gap_pse.tif")
```

```{r include=FALSE}
GMc.pal <- colorNumeric(c("#faf6ef", "#ed6f66", "#8a1c18", "#6c100d"), domain = values(GM_c), na.color = "transparent")
GMcmean.pal <- colorNumeric(c("#fcfbfd", "#9e9ac8", "#3f007d"), domain = values(GM_c_mean), na.color = "transparent")
GMcpred.pal <- colorNumeric(c("#fcfbfd", "#9e9ac8", "#3f007d"), domain = values(GM_c_pred), na.color = "transparent")

GMg.pal <- colorNumeric(c("#faf6ef", "#f7eedf", "#de5714"), domain = 0:1, na.color = "transparent")
GMgmean.pal <- colorNumeric(c("#fcfbfd", "#9e9ac8", "#3f007d"), domain = values(GM_g_mean), na.color = "transparent")
GMgpred.pal <- colorNumeric(c("#fcfbfd", "#9e9ac8", "#3f007d"), domain = values(GM_g_pred), na.color = "transparent")
```

```{r echo=FALSE}
#| column: page

GM_map <- leaflet(height=1400, width=2000) %>%
      addProviderTiles('Esri.WorldImagery') %>%
      addMapPane("parks", zIndex = 410) %>% 
      addMapPane("roads", zIndex = 415) %>%
      addMapPane("pred", zIndex = 420) %>% 
      addMapPane("mean", zIndex = 425) %>% 
      addMapPane("goutput", zIndex = 430) %>%
      addMapPane("coutput", zIndex = 435) %>% 
      addPolylines(data = roads, color = "#efbc15", opacity = 1, weight = 1.25,
                   options = pathOptions(pane = "roads")) %>%
      addPolygons(data = parksGM, color = "#1f78b4", weight = 1.25, fillColor = "#1f78b4", fillOpacity = 0.5,
                  options = pathOptions(pane = "parks")) %>% 
      # carbon estimates
      addRasterImage(x = GM_c , 
                     color = GMc.pal,
                     opacity = 1,
                     group = "Estimated C stocks",
                     options = pathOptions(pane = "coutput")) %>%
      addLegend(pal = GMc.pal, values = values(GM_c),
                title = "Total Carbon (g/m<sup>2</sup>)",
                group = "Estimated C stocks", opacity = 1) %>% 
      # carbon mean error   
      addRasterImage(x = GM_c_mean , 
                     color = GMcmean.pal,
                     opacity = 1,
                     group = "C mean residual error",
                     options = pathOptions(pane = "mean")) %>%
      addLegend(pal = GMcmean.pal, values = values(GM_c_mean),
                title = "Mean residual error",
                group = "C mean residual error", opacity = 1) %>%
      # carbon prediction error   
      addRasterImage(x = GM_c_pred , 
                     color = GMcpred.pal,
                     opacity = 1,
                     group = "C prediction error",
                     options = pathOptions(pane = "pred")) %>%
      addLegend(pal = GMcpred.pal, values = values(GM_c_pred),
                title = "Prediction error",
                group = "C prediction error", opacity = 1) %>%
      # gap estimates 
      addRasterImage(x = GM_g , 
                     color = GMg.pal,
                     opacity = 1,
                     group = "Estimated mature forest/gap",
                     options = pathOptions(pane = "goutput")) %>%
      addLegend(pal = GMg.pal, values = values(GM_g),
                title = "Probability area is mature forest",
                group = "Estimated mature forest/gap", opacity = 1) %>% 
      # gap mean error 
      addRasterImage(x = GM_g_mean , 
                     color = GMgmean.pal,
                     opacity = 1,
                     group = "Mature forest mean residual error",
                     options = pathOptions(pane = "mean")) %>%
      addLegend(pal = GMgmean.pal, values = values(GM_g_mean),
                title = "Mean residual error",
                group = "Mature forest mean residual error", opacity = 1) %>% 
      # gap prediction error 
      addRasterImage(x = GM_g_pred , 
                     color = GMgpred.pal,
                     opacity = 1,
                     group = "Mature forest prediction error",
                     options = pathOptions(pane = "pred")) %>%
      addLegend(pal = GMgpred.pal, values = values(GM_g_pred),
                title = "Prediction error",
                group = "Mature forest prediction error", opacity = 1) %>% 
      fitBounds(-57.772 ,49.345, -57.770, 49.955) %>% 
      addHomeButton(ext = c(-57.772 ,49.345, -57.770, 49.955), position = "topleft", group = "Recenter")%>%
      addLayersControl(overlayGroups = c("Estimated C stocks", "C mean residual error", "C prediction error", "Estimated mature forest/gap", "Mature forest mean residual error", "Mature forest prediction error"), position = "topleft", options = layersControlOptions(collapsed = F)) %>% 
      htmlwidgets::onRender("
        function() {
            $('.leaflet-control-layers-overlays').prepend('<label style=\"text-align:left\">Available layers</label>');
        }
    ") %>%
      hideGroup( group = c("C mean residual error", "C prediction error","Mature forest mean residual error", "Mature forest prediction error"))
    
GM_map
```
